// Loading CS Interface and express via npm
const csInterface = new CSInterface();
const loc = window.location.pathname;
const dir = decodeURI(loc.substring(1, loc.lastIndexOf('/')));
const express = require(dir + "/node_modules/express/index.js");
const i18next = require(dir + "/node_modules/i18next/dist/cjs/i18next.js");
const Backend = require(dir + "/node_modules/i18next-fs-backend/cjs/index.js");
const i18nextMiddleware = require(dir + "/node_modules/i18next-http-middleware/cjs/index.js");

// Swagger documentation, based on: http://www.acuriousanimal.com/2018/10/20/express-swagger-doc.html
const swaggerJsDoc = require(dir + "/node_modules/swagger-jsdoc/index.js");
const swaggerUi = require(dir + "/node_modules/swagger-ui-express/index.js");

const options = {
    swaggerDefinition: {
        info: {
            title: 'AHK2PremiereCEP',
            version: '1.0.0',
            description: 'Autogenerated documentation for defined javascript functions.',
        },
    },
    // List of files to be processed
    apis: [dir + '/../host/index.jsx'],
};

const specs = swaggerJsDoc(options);

function init() {

    // prepare languages
    i18next
        .use(Backend)
        .use(i18nextMiddleware.LanguageDetector)
        .init({
                debug: true,
                backend: {
                    // eslint-disable-next-line no-path-concat
                    loadPath: dir + '/locales/{{lng}}/{{ns}}.json',
                    // eslint-disable-next-line no-path-concat
                    addPath: dir + '/locales/{{lng}}/{{ns}}.missing.json'
                },
                fallbackLng: 'de-DE',
                preload: ['en', 'de-DE'],
                saveMissing: true
            }
        )

    // Setup server
    const app = express();
    const router = express.Router();

    // Setup i18NextMiddleware
    app.use(i18nextMiddleware.handle(i18next));
    router.use(i18nextMiddleware.handle(i18next));

    // Setup swagger endpoint
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));

    // Setup endpoints
    for (const functionDeclaration in host) {
        const key = functionDeclaration;
        const signature = host[key].toString().split("{")[0];

        if (signature === host[key].toString()) {
            console.log("Unable to read function definition of '" + key + "'.");
        } else {

            const parameters = extractParameters(signature);

            router.get('/' + key, function (req, res) {

                // Special code for faster debugging
                if (key === "kill") {
                    res.json({message: 'ok.'});
                    csInterface.closeExtension();
                }

                // Count request query parameters
                let propertyCount = 0;
                for (const propName in req.query) {
                    if (req.query.hasOwnProperty(propName)) {
                        propertyCount++;
                    }
                }
                if (parameters.indexOf("translate") > -1) {
                    propertyCount++;
                }

                // Extract request query parameters
                let params = [];
                for (const id in parameters) {
                    const propName = parameters[id];
                    if (req.query.hasOwnProperty(propName)) {
                        params.push(req.query[propName]);
                    } else {
                        if (propName !== "translate") {
                            console.log("Param not found: '" + propName + "'");
                        }
                    }
                }


                // Allow translation
                if (parameters.indexOf("translate") > -1) {
                    const translateFunc = req.t;
                    params.push(translateFunc);
                }

                // Check query parameter count
                if (parameters.length === params.length && params.length === propertyCount) {
                    // Execute function with given parameters (also: result)
                    executeCommand(key, params, res);
                } else {
                    res.json({message: 'error. wrong parameters.'});
                }

            });
        }
    }

    // Start server
    app.use('/', router);
    app.listen(SERVER_PORT);

    // Enable QE
    if (ENABLE_QE) {
        csInterface.evalScript("framework.enableQualityEngineering();")
    }

    document.getElementById("statusContainer").innerHTML = "Ready!";
    document.getElementById("statusContainer").className = "green";
}

const STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
const ARGUMENT_NAMES = /([^\s,]+)/g;

function extractParameters(signature) {
    const fnStr = signature.toString().replace(STRIP_COMMENTS, '');
    let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
    if (result === null)
        result = [];
    return Array.prototype.slice.call(result);
}

function executeCommand(command, params, res) {
    console.log("Execute: " + command);
    document.getElementById("lastCommandContainer").innerHTML = command;

    command += "(";
    for (let i = 0; i < params.length; i++) {
        if (!(params[i].toString().indexOf("function") !== -1)) {
            command += '"' + params[i] + '"';
        } else {
            command += params[i];
        }


        if (i < (params.length - 1)) {
            command += ", ";
        }
    }
    command += ");";

    console.log(command);
    csInterface.evalScript("host." + command, function (functionResult) {
        res.json({message: 'ok.', result: functionResult});
    });
}

function openHostWindow() {
    console.log('start "' + dir + '"');
    require('child_process').exec('start "" "' + dir + '/../host"');
}
